name: CI

on: 
  push:
    branches: 
      - master

jobs:
  build:

    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v1
    #- uses: actions/setup-dotnet@v1
    #  with:
    #    dotnet-version: '3.0.100'
    #- name: Where am I?
    #  run: |
    #    cd ${{ github.workspace }}
    #    ls
    #- name: Build
    #  run: dotnet build -c Release
    #- name: Test
    #  run: dotnet test -c Release -f netcoreapp3.0
    - name: Install dependencies
      run: |
        sudo apt-get install xmlstarlet
    - name: Publish release
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        echo $REPOSITORY_NAME
        export PACKAGE_VERSION=$(xmlstarlet sel -t -m '//VersionPrefix[1]' -v . -n <Platform.$REPOSITORY_NAME/Platform.$REPOSITORY_NAME.csproj)
        echo $PACKAGE_VERSION
        export PACKAGE_RELEASE_NOTES=$(xmlstarlet sel -t -m '//PackageReleaseNotes[1]' -v . -n <Platform.$REPOSITORY_NAME/Platform.$REPOSITORY_NAME.csproj)
        echo $PACKAGE_RELEASE_NOTES
        curl --request GET \
        --url https://api.github.com/repos/${{ github.repository }}/releases/tags/${PACKAGE_VERSION} \
        --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | jq -r '.name'
        #cat getReleaseByTag.json
        #curl --request POST \
        #--url https://api.github.com/repos/${{ github.repository }}/releases \
        #--header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
        #--header 'content-type: application/json' \
        #--data "{
        #  \"tag_name\": \"${PACKAGE_VERSION}\",
        #  \"target_commitish\": \"master\",
        #  \"name\": \"${PACKAGE_VERSION}\",
        #  \"body\": \"${PACKAGE_RELEASE_NOTES}\",
        #  \"draft\": false,
        #  \"prerelease\": false
        #  }" > createRelease.json
        #cat createRelease.json
